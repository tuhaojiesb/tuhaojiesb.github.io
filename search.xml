<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS</title>
      <link href="/2023/08/12/CSS/"/>
      <url>/2023/08/12/CSS/</url>
      
        <content type="html"><![CDATA[<p><code>什么是BFC</code></p><p>1、<code>BFC</code>是<code>Block Formatting Context</code>(块级格式化上下文)，可以理解成元素的一个<code>特异功能</code>。</p><p>2、该<code>特异功能</code>，再默认的情况下处于关闭状态；当元素满足了某些条件后，该<code>特异功能</code>被激活。</p><p>3、所谓激活<code>特异功能</code>，专业点说就是：该元素创建了 BFC(又称：开启了<code>BFC</code>)</p><p><code>开启了BFC(块级格式化上下文)能解决什么问题</code></p><p>1、元素开启了 BFC 后，其子元素不会再产生 margin 塌陷问题。</p><p>2、元素开启了 BFC 后，自己不会被其他浮动元素所覆盖。</p><p>3、元素开启了 BFC 后，就算其子元素浮动，元素自身高度也不会塌陷。</p><p><code>如何开启BFC</code></p><ul><li>根元素</li><li>浮动元素</li><li>绝对定位、固定定位的元素</li><li>行内块元素</li><li>表格单元格：table、thead、tbody、tfoot、th、td、tr、caption</li><li>overflow 的值不为 visible 的块元素</li><li>伸缩项目</li><li>多列容器（column-gap column-count）</li><li>column-span 为 all 的元素(即使该元素没有包裹再多列容器中)</li><li>dispaly 的值，设置为 flow-root</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/07/25/Vue3/"/>
      <url>/2023/07/25/Vue3/</url>
      
        <content type="html"><![CDATA[<!-- ---title:【必需】文章标题date:【必需】文章创建日期updated:【可选】文章更新日期tags:【可选】文章标签categories:【可选】文章分类keywords:【可选】文章关键字description:【可选】文章描述top_img:【可选】文章顶部图片comments:【可选】显示文章评论模块(默认 true)cover:【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)toc:【可选】显示文章TOC(默认为设置中toc的enable配置)toc_number:【可选】显示toc_number(默认为设置中toc的number配置)toc_style_simple:【可选】显示 toc 简洁模式copyright:【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)copyright_author:【可选】文章版权模块的文章作者copyright_author_href:【可选】文章版权模块的文章作者链接copyright_url:【可选】文章版权模块的文章连结链接copyright_info:【可选】文章版权模块的版权声明文字mathjax:【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)katex:【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)aplayer:【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置highlight_shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)aside:【可选】显示侧边栏 (默认 true)--- --><h1 id="Vue2-x-的响应式"><a href="#Vue2-x-的响应式" class="headerlink" title="Vue2.x 的响应式"></a>Vue2.x 的响应式</h1><p>实现原理：</p><ul><li>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截(数据劫持)。</li><li>数组类型：通过重写更新数组的一系列方法来实现拦截。(对数组的变更方法进行了包裹)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data,<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...获取的代码</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...设置的代码</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>存在问题：</p><ul><li>新增属性、删除属性、界面不会更新。</li><li>直接通过下标修改数组，界面不会更新。</li></ul><p>解决问题：</p><ul><li>this.$set(‘this.person’,’sex’,’女’) or Vue.set(‘this.person’,’sex’,’女’)</li><li>this.person.hobby.splice(0,1,’逛街’)</li></ul><h3 id="模拟-vue2-x-实现响应式"><a href="#模拟-vue2-x-实现响应式" class="headerlink" title="模拟 vue2.x 实现响应式"></a>模拟 vue2.x 实现响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#region</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我发现有人修改了name属性，我要去更新页面了&quot;</span>);</span><br><span class="line">    person.<span class="property">name</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">age</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我发现有人修改了age属性，我要去更新页面了&quot;</span>);</span><br><span class="line">    person.<span class="property">age</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//#endregion</span></span><br></pre></td></tr></table></figure><h1 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h1><p>实现原理：</p><ul><li>通过 Proxy(代理)：拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过 Reflect(反射)：对源对象的属性进行操作</li><li>MDN 文档中的 Proxy 与 Reflect：<ul><li>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></li><li>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul></li></ul><h3 id="模拟-Vue3-实现响应式"><a href="#模拟-Vue3-实现响应式" class="headerlink" title="模拟 Vue3 实现响应式"></a>模拟 Vue3 实现响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="comment">// 查 调用</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> target[propsName]; <span class="comment">// 这里不能使用target.propsName 是因为propsName是变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增 改 调用</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, propsName, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`有人修改了p身上的<span class="subst">$&#123;propsName&#125;</span>属性或者追加某个属性的时候调用`</span>,</span><br><span class="line">      target,</span><br><span class="line">      propsName,</span><br><span class="line">      value</span><br><span class="line">    );</span><br><span class="line">    target[propsName] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删 调用</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">delete</span> target[propsName];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过-Object-操作"><a href="#通过-Object-操作" class="headerlink" title="通过 Object 操作"></a>通过 Object 操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// caught TypeError: Cannot redefine property: cat Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">// 报错 因为是单线程所以终止了下面的执行 通过try catch解决</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以继续执行了&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="通过-Reflect-操作"><a href="#通过-Reflect-操作" class="headerlink" title="通过 Reflect 操作"></a>通过 Reflect 操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> x1 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> x2 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x1, x2); <span class="comment">// true false</span></span><br><span class="line"><span class="comment">// 没有报错 会有返回值</span></span><br><span class="line"><span class="keyword">if</span> (x2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx执行成功了&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx执行失败了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我一直可以执行&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="最终版的-Vue-底层雏形实现"><a href="#最终版的-Vue-底层雏形实现" class="headerlink" title="最终版的 Vue 底层雏形实现"></a>最终版的 Vue 底层雏形实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="comment">// 查 调用</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propsName); <span class="comment">// 这里不能使用target.propsName 是因为propsName是变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增 改 调用</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, propsName, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`有人修改了p身上的<span class="subst">$&#123;propsName&#125;</span>属性或者追加某个属性的时候调用`</span>,</span><br><span class="line">      target,</span><br><span class="line">      propsName,</span><br><span class="line">      value</span><br><span class="line">    );</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propsName, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删 调用</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, propsName);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="reactive-对比-ref"><a href="#reactive-对比-ref" class="headerlink" title="reactive 对比 ref"></a>reactive 对比 ref</h1><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：<code>基本数据类型</code>。</li><li>reactive 用来定义：<code>对象(或数组)类型数据</code>。</li><li>备注：ref 也可以用来定义<code>对象(或数组)类型数据</code>,它内部会通过 reactive 转为<code>代理对象</code>。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式(数据劫持)。</li><li>reactive 通过使用<code>Proxy</code>来实现响应式(数据劫持),并通过<code>Reflect</code>操作<code>源对象</code>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据<code>需要.value</code> ，读取数据时模板中直接读取<code>不需要.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<code>均不需要.value</code></li></ul></li></ul><h1 id="watch-函数"><a href="#watch-函数" class="headerlink" title="watch 函数"></a>watch 函数</h1><ul><li><p>与 vue2.x 中 watch 配置功能一致</p></li><li><p>两个小”坑”：</p><ul><li><p>监视<strong>reactive</strong>定义的响应式数据时，oldValue 是无法正确获取的，强制开启了深度监视(deep 配置失效)。</p></li><li><p>监视<strong>reactive</strong>定义的响应式数据中某个属性时(**前提这个属性的值还是对象 **)，<code>deep配置有效</code>。</p><blockquote><p>五种情况加一种特殊情况 自己练习~</p></blockquote></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">job</span>: &#123;</span><br><span class="line">    <span class="attr">j1</span>: &#123;</span><br><span class="line">      <span class="attr">salary</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一 监视ref所定义的一个响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  sum,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum变了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况二 监视ref所定义的多个响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  [sum, msg],</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum或msg变了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况三 监视reactive所定义的一个响应式数据 注意：此处无法正确的获取oldValue</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  person,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">// 此处deep配置无效</span></span><br><span class="line"><span class="comment">// 情况四 监视reactive所定义的一个响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">name</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的name变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况五 监视reactive所定义的一个响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">() =&gt;</span> person.<span class="property">name</span>, <span class="function">() =&gt;</span> person.<span class="property">age</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的name或age变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">//此处由于监视的是reactive所定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure><h1 id="watchEffect-函数"><a href="#watchEffect-函数" class="headerlink" title="watchEffect 函数"></a>watchEffect 函数</h1><ul><li>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect 的套路是：不用指明监视的属性，监视的回调中用到哪个属性，那就监视哪个属性。</li><li>watchEffect 有点像 computed：<ul><li>但 computed 注重的是计算出来的值(<strong>回调函数的返回值</strong>)，所以<strong>必须写</strong>返回值。</li><li>而 watchEffect 更注重的是过程(<strong>回调函数的函数体</strong>)，所以<strong>不用写</strong>返回值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watchEffect配置的回调执行了&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有两个被更名：<ul><li>beforeDestory 改名为 beforeUnmount</li><li>destory 改名为 unmounted</li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li>beforeCreate &#x3D;&#x3D;&#x3D;&gt; setup()</li><li>created &#x3D;&#x3D;&#x3D;&gt; setup()</li><li>beforeMount &#x3D;&#x3D;&#x3D;&gt; onBeforeMount</li><li>mountd &#x3D;&#x3D;&#x3D;&gt; onMountd</li><li>beforeUpdate &#x3D;&#x3D;&#x3D;&gt; onBeforeUpdate</li><li>updated &#x3D;&#x3D;&#x3D;&gt; onUpdated</li><li>beforeUnmount &#x3D;&#x3D;&#x3D;&gt; onBoforeUnmount</li><li>unmounted &#x3D;&#x3D;&#x3D;&gt; onUnmounted</li></ul></li></ul><h1 id="toRef-and-toRefs"><a href="#toRef-and-toRefs" class="headerlink" title="toRef and toRefs"></a>toRef and toRefs</h1><ul><li>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。(简单来说 就是让修改的数据也跟着响应化)</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用：要将响应式对象中的某个属性单独提供给外部使用时。</li><li>扩展：<code>toRefs</code>与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)</li></ul><h1 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h1><ul><li>shallowReactive：只处理对象最外层属性的响应式(浅响应式)</li><li>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理</li><li>什么时候用？<ul><li>如果有一个对象数据，结构比较深，但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef</li></ul></li></ul><h1 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h1><ul><li>readonly：让一个响应式数据变为只读的(深只读)。</li><li>shallowReadonly：让一个响应式数据变成只读的(浅只读)。</li><li>什么时候用？<ul><li>不希望数据被改变时。(<code>假如接收到其他组件里的传的数据 修改时希望其他组件数据不收影响就可以使用</code>)</li></ul></li></ul><h1 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h1><ul><li><p>作用：实现<code>祖孙组件间</code>通信</p></li><li><p>套路：父组件有一个<code>provide</code>选项来提供数据，后代组件有一个<code>inject</code>选项来开始使用这些数据。</p></li><li><p>具体写法：</p><ul><li><p>1、祖组件中</p></li><li><pre><code class="js">setup() &#123;let car = reactive(&#123;name:&#39;奔驰&#39;,price:&#39;40万&#39;&#125;)provide(&#39;car&#39;,car)&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2、后代组件中</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  setup() &#123;</span><br><span class="line">      const car = inject(&#x27;car&#x27;)</span><br><span class="line">      return &#123;car&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><ul><li>Options API 存在的问题<ul><li>使用传统 Options API 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改。</li></ul></li><li>Composition API 的优势<ul><li>我们可以更加优雅的组织我们的代码，函数，让相关功能的代码更加有序的组织在一起。</li></ul></li></ul><h1 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1><ul><li>在 vue2.0 中：组件必须有一个根标签</li><li>在 vue3.0 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处：减少标签层级，减少内存占用。</li></ul><h1 id="Teleport-传送门"><a href="#Teleport-传送门" class="headerlink" title="Teleport(传送门)"></a>Teleport(传送门)</h1><ul><li><p>什么是 Teleport？——<code>Teleport</code>是一种能够将我们的<code>组件html结构</code>移动到指定位置的技术。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Teleport</span> to=<span class="string">&quot;移动位置(body #atguigu)&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Teleport</span>&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3的世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

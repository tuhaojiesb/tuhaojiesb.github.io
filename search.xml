<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逻辑与和逻辑或</title>
      <link href="/2023/08/15/%E9%80%BB%E8%BE%91%E4%B8%8E%E9%80%BB%E8%BE%91%E6%88%96/"/>
      <url>/2023/08/15/%E9%80%BB%E8%BE%91%E4%B8%8E%E9%80%BB%E8%BE%91%E6%88%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f2a34dafe7bcc28bdafad165f3d3d7b949a15e7ca523c391e8b3300b33bbf41a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">test</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2023/08/12/CSS/"/>
      <url>/2023/08/12/CSS/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d7a36b185e75219f32643c17df750a397e589c34e339ea2f0a5c2fc27db5c479">bd25ed9264b080267271e137e33d0ce19cc181437921be219ec52a6b1976a23d1e8574f5f0a81f32e8569ca3cbf816e645369339e34ee956e94cb06435265148c1bd6cd1908c98d36547680f47dbc07f205c19cb5fd5ce88303fbcd6f94b616c8c5e9c28b46c512f355695c989f1f6aeb673d573527051adae8505475e6a84a5d42852c45c22c0e9d249a653a976890e977676963cc23954957e95d555ec193ef182d2ddc6dac08e4b44fde1b9d23fe9e59ebb9189c175f6bcb858def5c38ea376dd582353bf95f1541deafb63f756a20917dad968d0af127a10cd84720ac3bc5207bc05a2e07150a66bf2a1e7b5a333d789a9033b13e4a5e5ff924e301c1e01388b55068bf8671bf6016d5f8491f31ad425c68112e83c59a3a7eb9e33f60df5350415096ee83816a2af915bd010df45b528daa88ae554c19d9d1e02edd5cb1af3541e43338747b59968247ab1554822651ee4617c15fa9a537545053d5de2edda64e301692a0b98cf16211da2a5803d2db4591a21499ab7c0e56a05e47bea3a39dcf3587fd2a925c08d500701bd8b8dca9926df260f120b8ef36f93cb00d7c1103955133e55eafe6d0a3921dc3a94156f38e6e8ec7aba6327e4b293bf3c03561885217d114f0e637aad1cf91e75a4f936713cf870526f78ff0d0653f394ffd7396e5fee855d34149eca2ebb42667de6c175de79d71cfdade22c50ffad8a00c386df4d88a2681693b2ff12a7c131d793d50fab11eb9688557efcc8e30f2b47cc426fbf0e243717fe46dd9fc3674bd177a73a59fb04116e76922a8421b8dbcf9ecb9c3c9ac68d8dd7110f664d9275560f34c3ad0c1f0df531bf490864f3723c9f73e7b82c94da29fd0a6440315864407ca5e36e3dfb5b54023d10dac7741bdd8aa3e58f085daebd34c97a761da42d722fdc62bd9aa7da6da7a173a660d959ab1a4f0db78bea227defa015d2cdb5b0144b56d5930be3b493ec27920dcc0a0286fffcc0f5fd76877f5ab5ce410ed05eccf90bd387e05d01af2f72f6ecefba4f8c661e91c2aa41855e18e85eda21abc6fcf489068a5421598858ba61cdfcb35e8ddad631e651e190b733d0ee4bb21aeee57cb5371e44c5df339cb64d352a696bf001aa08fb8a62581bd7b6255c2a62f6392444aef2e610bfeb9a42f32ac1f436701d7490cf269ac9bdfeaa5b6b58db1485344173f5c9b1ccb4e93bf842803792c877f8081462debf3a462069b2f435a03d9becf9073b035d325d3fbe2f96347d20688a1d63bb18741803c1cc0cf34b20cacd62a61ef358e4d8f248d94d9c1b20214d0c307f332267bcdabbc6fd1f1c28472c3cee2d8ab7c6cebae7d99a924d8df79c9f802803e3fb61ef971df8cce38debfbd0b15236db68bc9e5b85089dd58437f59f266ed02c3ec6f39174a2d0498cdd3a4eba61d5cc9e2f8eca3479abb9887bbb9d922f4514baf441586b2a6da208a0acc42b5bc5f375761615cd1e87fb41f2f995cfe70bde1566a47c87bcf997aea564130844184b5c18b60c5696570101e0454624106438d3c12295a7aaf71bd3809473b438d3dfabe87142922c7f0b4185de4ac237bb87687e6cfc9382e0b2cecafff698babd5ab4e17f2d261341f1fcc4bf9ef14f7956519a4686a34f7f8b615c1f0c6b5e0d8662710e12e23762cbffa75f61620112e031fb41ce201a255f2613d5bbb9c65ac077fbbc9dc7ccdba40dc26c02087f9d0d6546fdf165144fdf324b4004bfc59a45ad7e0b274ffbddf4538bc849d68d9b1f969872b594fd9fb4b460f049bf9fd34e59879341af689b7682e96ad1595d9828371ff7b8001ebca3c21924f6aaf8c8b3e363549b6574a3935da42908f1ec6050e3860fbb9b604cbd9ddec01ddce601c2dce30b50853758c7b3a2cf7eb8066d5f46392d48931aa8dd452d19</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">test</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/07/25/Vue3/"/>
      <url>/2023/07/25/Vue3/</url>
      
        <content type="html"><![CDATA[<!-- ---title:【必需】文章标题date:【必需】文章创建日期updated:【可选】文章更新日期tags:【可选】文章标签categories:【可选】文章分类keywords:【可选】文章关键字description:【可选】文章描述top_img:【可选】文章顶部图片comments:【可选】显示文章评论模块(默认 true)cover:【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)toc:【可选】显示文章TOC(默认为设置中toc的enable配置)toc_number:【可选】显示toc_number(默认为设置中toc的number配置)toc_style_simple:【可选】显示 toc 简洁模式copyright:【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)copyright_author:【可选】文章版权模块的文章作者copyright_author_href:【可选】文章版权模块的文章作者链接copyright_url:【可选】文章版权模块的文章连结链接copyright_info:【可选】文章版权模块的版权声明文字mathjax:【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)katex:【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)aplayer:【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置highlight_shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)aside:【可选】显示侧边栏 (默认 true)--- --><h1 id="Vue2-x-的响应式"><a href="#Vue2-x-的响应式" class="headerlink" title="Vue2.x 的响应式"></a>Vue2.x 的响应式</h1><p>实现原理：</p><ul><li>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截(数据劫持)。</li><li>数组类型：通过重写更新数组的一系列方法来实现拦截。(对数组的变更方法进行了包裹)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data,<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...获取的代码</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...设置的代码</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>存在问题：</p><ul><li>新增属性、删除属性、界面不会更新。</li><li>直接通过下标修改数组，界面不会更新。</li></ul><p>解决问题：</p><ul><li>this.$set(‘this.person’,’sex’,’女’) or Vue.set(‘this.person’,’sex’,’女’)</li><li>this.person.hobby.splice(0,1,’逛街’)</li></ul><h3 id="模拟-vue2-x-实现响应式"><a href="#模拟-vue2-x-实现响应式" class="headerlink" title="模拟 vue2.x 实现响应式"></a>模拟 vue2.x 实现响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#region</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我发现有人修改了name属性，我要去更新页面了&quot;</span>);</span><br><span class="line">    person.<span class="property">name</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(p, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">age</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我发现有人修改了age属性，我要去更新页面了&quot;</span>);</span><br><span class="line">    person.<span class="property">age</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//#endregion</span></span><br></pre></td></tr></table></figure><h1 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h1><p>实现原理：</p><ul><li>通过 Proxy(代理)：拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过 Reflect(反射)：对源对象的属性进行操作</li><li>MDN 文档中的 Proxy 与 Reflect：<ul><li>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></li><li>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul></li></ul><h3 id="模拟-Vue3-实现响应式"><a href="#模拟-Vue3-实现响应式" class="headerlink" title="模拟 Vue3 实现响应式"></a>模拟 Vue3 实现响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="comment">// 查 调用</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> target[propsName]; <span class="comment">// 这里不能使用target.propsName 是因为propsName是变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增 改 调用</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, propsName, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`有人修改了p身上的<span class="subst">$&#123;propsName&#125;</span>属性或者追加某个属性的时候调用`</span>,</span><br><span class="line">      target,</span><br><span class="line">      propsName,</span><br><span class="line">      value</span><br><span class="line">    );</span><br><span class="line">    target[propsName] = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删 调用</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">delete</span> target[propsName];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过-Object-操作"><a href="#通过-Object-操作" class="headerlink" title="通过 Object 操作"></a>通过 Object 操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// caught TypeError: Cannot redefine property: cat Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">// 报错 因为是单线程所以终止了下面的执行 通过try catch解决</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以继续执行了&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="通过-Reflect-操作"><a href="#通过-Reflect-操作" class="headerlink" title="通过 Reflect 操作"></a>通过 Reflect 操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> x1 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> x2 = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;c&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x1, x2); <span class="comment">// true false</span></span><br><span class="line"><span class="comment">// 没有报错 会有返回值</span></span><br><span class="line"><span class="keyword">if</span> (x2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx执行成功了&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx执行失败了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我一直可以执行&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="最终版的-Vue-底层雏形实现"><a href="#最终版的-Vue-底层雏形实现" class="headerlink" title="最终版的 Vue 底层雏形实现"></a>最终版的 Vue 底层雏形实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="comment">// 查 调用</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propsName); <span class="comment">// 这里不能使用target.propsName 是因为propsName是变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增 改 调用</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, propsName, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`有人修改了p身上的<span class="subst">$&#123;propsName&#125;</span>属性或者追加某个属性的时候调用`</span>,</span><br><span class="line">      target,</span><br><span class="line">      propsName,</span><br><span class="line">      value</span><br><span class="line">    );</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propsName, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删 调用</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, propsName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propsName&#125;</span>属性`</span>, target, propsName);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, propsName);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="reactive-对比-ref"><a href="#reactive-对比-ref" class="headerlink" title="reactive 对比 ref"></a>reactive 对比 ref</h1><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：<code>基本数据类型</code>。</li><li>reactive 用来定义：<code>对象(或数组)类型数据</code>。</li><li>备注：ref 也可以用来定义<code>对象(或数组)类型数据</code>,它内部会通过 reactive 转为<code>代理对象</code>。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式(数据劫持)。</li><li>reactive 通过使用<code>Proxy</code>来实现响应式(数据劫持),并通过<code>Reflect</code>操作<code>源对象</code>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据<code>需要.value</code> ，读取数据时模板中直接读取<code>不需要.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<code>均不需要.value</code></li></ul></li></ul><h1 id="watch-函数"><a href="#watch-函数" class="headerlink" title="watch 函数"></a>watch 函数</h1><ul><li><p>与 vue2.x 中 watch 配置功能一致</p></li><li><p>两个小”坑”：</p><ul><li><p>监视<strong>reactive</strong>定义的响应式数据时，oldValue 是无法正确获取的，强制开启了深度监视(deep 配置失效)。</p></li><li><p>监视<strong>reactive</strong>定义的响应式数据中某个属性时(**前提这个属性的值还是对象 **)，<code>deep配置有效</code>。</p><blockquote><p>五种情况加一种特殊情况 自己练习~</p></blockquote></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">job</span>: &#123;</span><br><span class="line">    <span class="attr">j1</span>: &#123;</span><br><span class="line">      <span class="attr">salary</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一 监视ref所定义的一个响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  sum,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum变了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况二 监视ref所定义的多个响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  [sum, msg],</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum或msg变了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况三 监视reactive所定义的一个响应式数据 注意：此处无法正确的获取oldValue</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  person,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">// 此处deep配置无效</span></span><br><span class="line"><span class="comment">// 情况四 监视reactive所定义的一个响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">name</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的name变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 情况五 监视reactive所定义的一个响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">() =&gt;</span> person.<span class="property">name</span>, <span class="function">() =&gt;</span> person.<span class="property">age</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的name或age变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">//此处由于监视的是reactive所定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure><h1 id="watchEffect-函数"><a href="#watchEffect-函数" class="headerlink" title="watchEffect 函数"></a>watchEffect 函数</h1><ul><li>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect 的套路是：不用指明监视的属性，监视的回调中用到哪个属性，那就监视哪个属性。</li><li>watchEffect 有点像 computed：<ul><li>但 computed 注重的是计算出来的值(<strong>回调函数的返回值</strong>)，所以<strong>必须写</strong>返回值。</li><li>而 watchEffect 更注重的是过程(<strong>回调函数的函数体</strong>)，所以<strong>不用写</strong>返回值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watchEffect配置的回调执行了&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有两个被更名：<ul><li>beforeDestory 改名为 beforeUnmount</li><li>destory 改名为 unmounted</li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li>beforeCreate &#x3D;&#x3D;&#x3D;&gt; setup()</li><li>created &#x3D;&#x3D;&#x3D;&gt; setup()</li><li>beforeMount &#x3D;&#x3D;&#x3D;&gt; onBeforeMount</li><li>mountd &#x3D;&#x3D;&#x3D;&gt; onMountd</li><li>beforeUpdate &#x3D;&#x3D;&#x3D;&gt; onBeforeUpdate</li><li>updated &#x3D;&#x3D;&#x3D;&gt; onUpdated</li><li>beforeUnmount &#x3D;&#x3D;&#x3D;&gt; onBoforeUnmount</li><li>unmounted &#x3D;&#x3D;&#x3D;&gt; onUnmounted</li></ul></li></ul><h1 id="toRef-and-toRefs"><a href="#toRef-and-toRefs" class="headerlink" title="toRef and toRefs"></a>toRef and toRefs</h1><ul><li>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。(简单来说 就是让修改的数据也跟着响应化)</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用：要将响应式对象中的某个属性单独提供给外部使用时。</li><li>扩展：<code>toRefs</code>与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)</li></ul><h1 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h1><ul><li>shallowReactive：只处理对象最外层属性的响应式(浅响应式)</li><li>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理</li><li>什么时候用？<ul><li>如果有一个对象数据，结构比较深，但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef</li></ul></li></ul><h1 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h1><ul><li>readonly：让一个响应式数据变为只读的(深只读)。</li><li>shallowReadonly：让一个响应式数据变成只读的(浅只读)。</li><li>什么时候用？<ul><li>不希望数据被改变时。(<code>假如接收到其他组件里的传的数据 修改时希望其他组件数据不收影响就可以使用</code>)</li></ul></li></ul><h1 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h1><ul><li><p>作用：实现<code>祖孙组件间</code>通信</p></li><li><p>套路：父组件有一个<code>provide</code>选项来提供数据，后代组件有一个<code>inject</code>选项来开始使用这些数据。</p></li><li><p>具体写法：</p><ul><li><p>1、祖组件中</p></li><li><pre><code class="js">setup() &#123;let car = reactive(&#123;name:&#39;奔驰&#39;,price:&#39;40万&#39;&#125;)provide(&#39;car&#39;,car)&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2、后代组件中</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  setup() &#123;</span><br><span class="line">      const car = inject(&#x27;car&#x27;)</span><br><span class="line">      return &#123;car&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><ul><li>Options API 存在的问题<ul><li>使用传统 Options API 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改。</li></ul></li><li>Composition API 的优势<ul><li>我们可以更加优雅的组织我们的代码，函数，让相关功能的代码更加有序的组织在一起。</li></ul></li></ul><h1 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h1><ul><li>在 vue2.0 中：组件必须有一个根标签</li><li>在 vue3.0 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处：减少标签层级，减少内存占用。</li></ul><h1 id="Teleport-传送门"><a href="#Teleport-传送门" class="headerlink" title="Teleport(传送门)"></a>Teleport(传送门)</h1><ul><li><p>什么是 Teleport？——<code>Teleport</code>是一种能够将我们的<code>组件html结构</code>移动到指定位置的技术。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Teleport</span> to=<span class="string">&quot;移动位置(body #atguigu)&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Teleport</span>&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3的世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
